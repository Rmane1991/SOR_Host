using iTextSharp.text;
using iTextSharp.text.pdf;
using System;
using System.Configuration;
using System.Data;
using System.IO;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using AppLogger;
using System.Threading;
using ClosedXML.Excel;

namespace BussinessAccessLayer
{
    public class ExportFormat
    {
        #region Data Objext
        DataSet _dsTransactionViewer = new DataSet();
        string ClientLogo = string.Empty;
        #endregion

        #region Export PDF
        public void ExporttoPdf(string username, string BankName, string ReportName, DataSet _dsTransactionViewer)
        {
            try
            {

                GridView gvExport = new GridView();
                gvExport.DataSource = _dsTransactionViewer.Tables[0];
                gvExport.DataBind();
                gvExport.AllowPaging = false;

                iTextSharp.text.Table table = new iTextSharp.text.Table(_dsTransactionViewer.Tables[0].Columns.Count) { DefaultVerticalAlignment = iTextSharp.text.Element.ALIGN_MIDDLE };
                iTextSharp.text.Image addLogo = default(iTextSharp.text.Image);
                addLogo = iTextSharp.text.Image.GetInstance(System.Web.HttpContext.Current.Server.MapPath("~/" + HttpContext.Current.Session["ClientImagePath"] + BankName + ".gif".ToString()));
                addLogo.ScalePercent(50f);

                table.Cellpadding = 1;
                table.Width = 100;
                //float[] width1 = new float[] { 100f, 116 };
                //table.Widths = width1;
                iTextSharp.text.Font fontTable = FontFactory.GetFont("Arial", 6, iTextSharp.text.Font.NORMAL);
                iTextSharp.text.Font fontHeader = FontFactory.GetFont("Arial", 8, iTextSharp.text.Font.BOLD, Color.WHITE);


                for (int i = 0; i < _dsTransactionViewer.Tables[0].Columns.Count; i++)
                {
                    string cellText = _dsTransactionViewer.Tables[0].Columns[i].ToString();
                    iTextSharp.text.Cell cell = new iTextSharp.text.Cell(new Phrase(cellText, fontHeader));
                    //cell.NoWrap = true;
                    //cell.BackgroundColor = new iTextSharp.text.Color(System.Drawing.ColorTranslator.FromHtml("#000"));
                    cell.BackgroundColor = new iTextSharp.text.Color(System.Drawing.ColorTranslator.FromHtml("#2E9AFE"));
                    //  cell.Width = 500f;

                    table.AddCell(cell);
                }
                for (int i = 0; i < _dsTransactionViewer.Tables[0].Rows.Count; i++)
                {
                    for (int j = 0; j < _dsTransactionViewer.Tables[0].Columns.Count; j++)
                    {
                        string cellText = (_dsTransactionViewer.Tables[0].Rows[i][j].ToString());
                        iTextSharp.text.Cell cell = new iTextSharp.text.Cell(new Phrase(cellText, fontTable));
                        // cell.Width = 500f;
                        cell.VerticalAlignment = Element.ALIGN_CENTER;
                        //cell.NoWrap = true;
                        // cell.Height = "22";
                        table.AddCell(cell);
                    }
                }
                Document pdfDoc = new Document(PageSize.A4, 10f, 10f, 10f, 5f);
                PdfWriter pdfW = PdfWriter.GetInstance(pdfDoc, System.Web.HttpContext.Current.Response.OutputStream);
                int pagecount = pdfW.PageNumber;
                Paragraph ph = new Paragraph("Page No :-" + pagecount, new iTextSharp.text.Font(iTextSharp.text.Font.NORMAL, 5));
                //*********************************************************************
                iTextSharp.text.Font fontFooter = FontFactory.GetFont("Arial", 6, iTextSharp.text.Color.BLUE);
                Chunk pdfFooter = new Chunk(HttpContext.Current.Session["copyrightBy"].ToString() + "                                       "
                    + "Printed Date : " + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss") + "                                                                                                                          "
                    + "Page No. ", fontFooter);
                Phrase prsPdfPara = new Phrase(pdfFooter);
                HeaderFooter parafooter = new HeaderFooter(prsPdfPara, true);
                parafooter.Alignment = Element.ALIGN_RIGHT;
                pdfDoc.Footer = parafooter;
                pdfDoc.Open();
                addLogo.Alignment = iTextSharp.text.Image.ALIGN_LEFT;
                pdfDoc.Add(addLogo);
                Paragraph pcreatedBy = new Paragraph("Report Generated By : " + username, new iTextSharp.text.Font(iTextSharp.text.Font.BOLD, 8));
                pcreatedBy.Alignment = iTextSharp.text.Element.ALIGN_RIGHT;
                pdfDoc.Add(pcreatedBy);
                Paragraph pp = new Paragraph(ReportName, new iTextSharp.text.Font(iTextSharp.text.Font.BOLD, 12));
                pp.Alignment = iTextSharp.text.Element.ALIGN_CENTER;
                pdfDoc.Add(pp);
                pdfDoc.Add(table);
                pdfDoc.Close();
                System.Web.HttpContext.Current.Response.ContentType = "application/pdf";
                System.Web.HttpContext.Current.Response.AddHeader("content-disposition", string.Format("attachment; filename={0}", ReportName + "_" + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss") + ".pdf"));
                System.Web.HttpContext.Current.Response.Cache.SetCacheability(HttpCacheability.NoCache);
                System.Web.HttpContext.Current.Response.Write(pdfDoc);
                //System.Web.HttpContext.Current.Response.End();
                System.Web.HttpContext.Current.Response.Flush();
            }
            catch (Exception Ex)
            {
                ErrorLog.CommonTrace("Page : ExportFormat.cs \nFunction : ExporttoPdf() \nException Occured\n" + Ex.Message);
                //_dbAccess.StoreErrorDescriptionnull, "ExportFormat.cs", "ExporttoPdf()", Ex);
            }
        }
        #endregion

        #region Export Excel
        public void ExporttoExcel(string username, string BankName, string ReportName, DataSet _dsTransactionViewer)
        {
            try
            {
                GridView gvExportExcel = new GridView();
                gvExportExcel.DataSource = _dsTransactionViewer.Tables[0];
                gvExportExcel.DataBind();
                System.Web.HttpContext.Current.Response.Clear();
                System.Web.HttpContext.Current.Response.Buffer = true;
                System.Web.HttpContext.Current.Response.ClearContent();
                System.Web.HttpContext.Current.Response.ClearHeaders();
                System.Web.HttpContext.Current.Response.Charset = "";
                string FileName = ReportName + "_" + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss") + ".xls";
                StringWriter strwritter = new StringWriter();
                HtmlTextWriter htmltextwrtter = new HtmlTextWriter(strwritter);

                System.Web.HttpContext.Current.Response.Cache.SetCacheability(HttpCacheability.NoCache);
                System.Web.HttpContext.Current.Response.ContentType = "application/vnd.ms-excel";
                System.Web.HttpContext.Current.Response.AddHeader("Content-Disposition", "attachment;filename=" + FileName);
                string _addGeneratedBy = "Generated By : " + username;
                string _addFooter = ConfigurationManager.AppSettings["copyrightBy"].ToString() + "    Print Date: " + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss");
                System.Web.HttpContext.Current.Response.Output.Write(strwritter.ToString());

                gvExportExcel.GridLines = GridLines.Both;
                gvExportExcel.HeaderStyle.Font.Bold = true;
                string style = @"<style> TD { mso-number-format:\@; } </style>";
                string _addHeader = ReportName;
                htmltextwrtter.WriteLine("<table><tr><td colspan=7 align=center>" + _addHeader + " <td/></tr></table>");
                htmltextwrtter.WriteLine(_addGeneratedBy);
                gvExportExcel.RenderControl(htmltextwrtter);
                htmltextwrtter.WriteLine(_addFooter);
                System.Web.HttpContext.Current.Response.Write(style);
                System.Web.HttpContext.Current.Response.Write(strwritter.ToString());

            }
            catch (Exception Ex)
            {
                ErrorLog.CommonTrace("Page : ExportFormat.cs \nFunction : ExporttoExcel() \nException Occured\n" + Ex.Message);
            }
            finally
            {
                System.Web.HttpContext.Current.Response.End();
                System.Web.HttpContext.Current.Response.Flush();
            }
        }

        public void ExporttoExcel(string username, string BankName, string ReportName, DataSet _dsTransactionViewer, string pageFilters)
        {
            try
            {
                GridView gvExportExcel = new GridView();
                gvExportExcel.DataSource = _dsTransactionViewer.Tables[0];
                gvExportExcel.DataBind();

                try
                {
                    System.Web.HttpContext.Current.Response.Clear();
                    System.Web.HttpContext.Current.Response.Buffer = true;
                    System.Web.HttpContext.Current.Response.ClearContent();
                    System.Web.HttpContext.Current.Response.ClearHeaders();
                    System.Web.HttpContext.Current.Response.Charset = "";
                    string FileName = ReportName + "_" + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss") + ".xls";
                    StringWriter strwritter = new StringWriter();
                    HtmlTextWriter htmltextwrtter = new HtmlTextWriter(strwritter);

                    System.Web.HttpContext.Current.Response.Cache.SetCacheability(HttpCacheability.NoCache);
                    System.Web.HttpContext.Current.Response.ContentType = "application/vnd.ms-excel";
                    System.Web.HttpContext.Current.Response.AddHeader("Content-Disposition", "attachment;filename=" + FileName);
                    string _addGeneratedBy = pageFiltersApplyCSS(pageFilters);
                    string _addFooter = ConfigurationManager.AppSettings["copyrightBy"].ToString() + "    Print Date: " + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss");
                    System.Web.HttpContext.Current.Response.Output.Write(strwritter.ToString());

                    gvExportExcel.GridLines = GridLines.Both;
                    gvExportExcel.HeaderStyle.Font.Bold = true;
                    string style = @"<style> TD { mso-number-format:\@; } </style>";
                    //string style = @"<style> .textmode {mso-number-format:General} </style>";
                    string _addHeader = !string.IsNullOrEmpty(ReportName) ? "<strong> " + ReportName + " </strong>" : ReportName;
                    htmltextwrtter.WriteLine("<table><tr><td colspan=7 align=center>" + _addHeader + " <td/></tr></table>");
                    htmltextwrtter.WriteLine(_addGeneratedBy);
                    gvExportExcel.RenderControl(htmltextwrtter);
                    htmltextwrtter.WriteLine(_addFooter);
                    System.Web.HttpContext.Current.Response.Write(style);
                    System.Web.HttpContext.Current.Response.Write(strwritter.ToString());
                    
                    //System.Web.HttpContext.Current.Response.Flush();
                    //HttpContext.Current.ApplicationInstance.CompleteRequest();
                    
                }
                catch (ThreadAbortException)
                { 
                }

            }
            catch (Exception Ex)
            {
                ErrorLog.CommissionError(Ex);
            }
            finally
            {
                System.Web.HttpContext.Current.Response.Flush();
                System.Web.HttpContext.Current.Response.End();
            }
        }

        public void EXPORTTOEXCEL(string username, string BankName, string ReportName, DataSet _dsTransactionViewer, string pageFilters)
        {
            try
            {
                if (string.IsNullOrEmpty(ReportName)) ReportName = "Report.xlsx";
                else
                {
                    if (ReportName.Length > 30) ReportName = ReportName.Substring(0, 29).ToString();
                    ReportName = ReportName + ".xlsx";
                }
                    
                using (XLWorkbook wb = new XLWorkbook())
                {
                    wb.Worksheets.Add(_dsTransactionViewer.Tables[0], ReportName);
                    System.Web.HttpContext.Current.Response.Clear();
                    System.Web.HttpContext.Current.Response.Buffer = true;
                    System.Web.HttpContext.Current.Response.Charset = "";
                    System.Web.HttpContext.Current.Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    System.Web.HttpContext.Current.Response.AddHeader("content-disposition", "attachment;filename="+ ReportName);
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(System.Web.HttpContext.Current.Response.OutputStream);
                    }
                }
            }
            catch (Exception Ex)
            {
                ErrorLog.CommonError(Ex);
            }
            finally
            {
                System.Web.HttpContext.Current.Response.Flush();
                System.Web.HttpContext.Current.Response.End();
            }
        }

        private string pageFiltersApplyCSS(string pageFilters)
        {
            try
            {
                if (!string.IsNullOrEmpty(pageFilters))
                {
                    pageFilters = pageFilters.Contains("Generated By") ? pageFilters.Replace("Generated By","<strong> Generated By :</strong>").ToString() : pageFilters;
                    pageFilters = pageFilters.Contains("From Date") ? pageFilters.Replace("From Date", "<strong> From Date :</strong>").ToString() : pageFilters;
                    pageFilters = pageFilters.Contains("To Date") ? pageFilters.Replace("To Date", "<strong> To Date :</strong>").ToString() : pageFilters;
                    pageFilters = pageFilters.Contains("DATE") ? pageFilters.Replace("Date", "<strong> Date :</strong>").ToString() : pageFilters;
                    pageFilters = pageFilters.Contains("Month") ? pageFilters.Replace("Month", "<strong> Month :</strong>").ToString() : pageFilters;
                    pageFilters = pageFilters.Contains("Year") ? pageFilters.Replace("Year", "<strong> Year :</strong>").ToString() : pageFilters;
                }
            }
            catch (Exception Ex)
            {
                ErrorLog.CommonTrace("Page : ExportFormat.cs \nFunction : pageFiltersApplyCSS() \nException Occured\n" + Ex.Message);
                //_dbAccess.StoreErrorDescriptionnull, "ExportFormat.cs", "pageFiltersApplyCSS()", Ex);
            }
            return pageFilters;
        }
        #endregion

        public void ExportInCSV(string username, string BankName, string ReportName, DataSet _dsTransactionViewer)
        {
            try
            {
                if (_dsTransactionViewer.Tables.Count > 0)
                {
                    string FileName = ReportName + "_" + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss") + ".csv";

                    System.Web.HttpContext.Current.Response.Clear();
                    System.Web.HttpContext.Current.Response.Buffer = true;
                    System.Web.HttpContext.Current.Response.AddHeader("content-disposition", "attachment;filename=" + FileName);
                    System.Web.HttpContext.Current.Response.Charset = "";
                    System.Web.HttpContext.Current.Response.ContentType = "application/text";

                    StringBuilder columnbind = new StringBuilder();
                    for (int k = 0; k < _dsTransactionViewer.Tables[0].Columns.Count; k++)
                    {
                        columnbind.Append(_dsTransactionViewer.Tables[0].Columns[k].ToString() + ',');
                    }
                    columnbind.Append("\r\n");
                    for (int i = 0; i < _dsTransactionViewer.Tables[0].Rows.Count; i++)
                    {
                        for (int k = 0; k < _dsTransactionViewer.Tables[0].Columns.Count; k++)
                        {
                            columnbind.Append(_dsTransactionViewer.Tables[0].Rows[i][k].ToString() + ',');
                        }
                        columnbind.Append("\r\n");
                    }
                    System.Web.HttpContext.Current.Response.Output.Write(columnbind.ToString());
                    //System.Web.HttpContext.Current.Response.Flush();
                    //System.Web.HttpContext.Current.Response.End();
                }
            }
            catch (Exception Ex)
            {
                ErrorLog.CommonTrace("Page : ExportFormat.cs \nFunction : ExportInCSV() \nException Occured\n" + Ex.Message);
                //_dbAccess.StoreErrorDescriptionnull, "ExportFormat.cs", "ExportInCSV()", Ex);
            }
            finally
            {
                System.Web.HttpContext.Current.Response.Flush();
                System.Web.HttpContext.Current.Response.End();
            }
        }

        #region ExporttoExcelCourierReports
        public void ExporttoExcelCourierReports(string username, string BankName, string ReportName, DataSet _dsTransactionViewer)
        {
            try
            {
                GridView gvExportExcel = new GridView();
                gvExportExcel.DataSource = _dsTransactionViewer.Tables[1];
                gvExportExcel.DataBind();
                System.Web.HttpContext.Current.Response.Clear();
                System.Web.HttpContext.Current.Response.Buffer = true;
                System.Web.HttpContext.Current.Response.ClearContent();
                System.Web.HttpContext.Current.Response.ClearHeaders();
                System.Web.HttpContext.Current.Response.Charset = "";
                string FileName = ReportName + "_" + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss") + ".xls";
                StringWriter strwritter = new StringWriter();
                HtmlTextWriter htmltextwrtter = new HtmlTextWriter(strwritter);

                System.Web.HttpContext.Current.Response.Cache.SetCacheability(HttpCacheability.NoCache);
                System.Web.HttpContext.Current.Response.ContentType = "application/vnd.ms-excel";
                System.Web.HttpContext.Current.Response.AddHeader("Content-Disposition", "attachment;filename=" + FileName);
                string _addGeneratedBy = "Generated By : " + username;
                string _addFooter = ConfigurationManager.AppSettings["copyrightBy"].ToString() + "    Print Date: " + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss");
                System.Web.HttpContext.Current.Response.Output.Write(strwritter.ToString());

                gvExportExcel.GridLines = GridLines.Both;
                gvExportExcel.HeaderStyle.Font.Bold = true;
                string style = @"<style> TD { mso-number-format:\@; } </style>";
                string _addHeader = ReportName;                           //  Report Generated By : " + username;
                htmltextwrtter.WriteLine("<table><tr><td colspan=7 align=center>" + _addHeader + " <td/></tr></table>");
                htmltextwrtter.WriteLine(_addGeneratedBy);
                gvExportExcel.RenderControl(htmltextwrtter);
                htmltextwrtter.WriteLine(_addFooter);
                System.Web.HttpContext.Current.Response.Write(style);
                System.Web.HttpContext.Current.Response.Write(strwritter.ToString());

                System.Web.HttpContext.Current.Response.End();
                System.Web.HttpContext.Current.Response.Flush();


            }
            catch (Exception Ex)
            {
                ErrorLog.CommonTrace("Page : ExportFormat.cs \nFunction : ExporttoExcelCourierReports() \nException Occured\n" + Ex.Message);
                //_dbAccess.StoreErrorDescriptionnull, "ExportFormat.cs", "ExporttoExcelCourierReports()", Ex);
            }
        }
        #endregion

        #region Export to Notepad
        public void WriteDataToText(string username, string BankName, string ReportName, DataSet _dsTransactionViewer)
        {
            {
                try
                {
                    DataTable dt = _dsTransactionViewer.Tables[0];
                    StringBuilder sbTextFile = new StringBuilder();
                    int count = 0;
                    foreach (DataColumn column in dt.Columns)
                    { }
                    // sbTextFile.Append("\r\n");
                    foreach (DataRow row in dt.Rows)
                    {
                        foreach (DataColumn column in dt.Columns)
                        {
                            ++count;
                            if (count == dt.Columns.Count)
                            {
                                sbTextFile.Append(@"" + row[column.ColumnName].ToString() + "");
                            }
                            else
                            {
                                sbTextFile.Append(@"" + row[column.ColumnName].ToString() + ",");
                            }
                        }



                        sbTextFile.Append("\r\n");
                        count = 0;
                    }

                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Response.Buffer = true;
                    HttpContext.Current.Response.AddHeader("content-disposition", "attachment;filename=" + ReportName + ".txt");
                    HttpContext.Current.Response.Charset = "";
                    HttpContext.Current.Response.ContentType = "application/text";
                    HttpContext.Current.Response.Output.Write(sbTextFile);
                    HttpContext.Current.Response.Flush();
                    HttpContext.Current.Response.End();



                }
                catch (Exception Ex)
                {
                    ErrorLog.CommonTrace("Page : WriteDataToText.cs \nFunction : pageFiltersApplyCSS() \nException Occured\n" + Ex.Message);
                    //_dbAccess.StoreErrorDescriptionnull, "WriteDataToText.cs", "pageFiltersApplyCSS()", Ex);
                }
            }
        }
        #endregion
    }
}
